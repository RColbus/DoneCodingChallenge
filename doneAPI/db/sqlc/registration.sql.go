// Code generated by sqlc. DO NOT EDIT.
// source: registration.sql

package db

import (
	"context"
)

const createRegistration = `-- name: CreateRegistration :one
INSERT INTO registrations (
  first_name,
  middle_name,
  last_name,
  phone_number,
  email_address,
  street_address_line1,
  street_address_line2,
  city,
  state,
  zip_code,
  photo_path,
  birth_date,
  appointment_date,
  appointment_time
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
         ) RETURNING id, first_name, middle_name, last_name, phone_number, email_address, street_address_line1, street_address_line2, city, state, zip_code, photo_path, birth_date, appointment_date, appointment_time, created_at
`

type CreateRegistrationParams struct {
	FirstName          string `json:"first_name"`
	MiddleName         string `json:"middle_name"`
	LastName           string `json:"last_name"`
	PhoneNumber        string `json:"phone_number"`
	EmailAddress       string `json:"email_address"`
	StreetAddressLine1 string `json:"street_address_line1"`
	StreetAddressLine2 string `json:"street_address_line2"`
	City               string `json:"city"`
	State              string `json:"state"`
	ZipCode            string `json:"zip_code"`
	PhotoPath          string `json:"photo_path"`
	BirthDate          string `json:"birth_date"`
	AppointmentDate    string `json:"appointment_date"`
	AppointmentTime    string `json:"appointment_time"`
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, createRegistration,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.StreetAddressLine1,
		arg.StreetAddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.PhotoPath,
		arg.BirthDate,
		arg.AppointmentDate,
		arg.AppointmentTime,
	)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.StreetAddressLine1,
		&i.StreetAddressLine2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.PhotoPath,
		&i.BirthDate,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRegistrations = `-- name: DeleteRegistrations :exec
DELETE FROM Registrations
WHERE id = $1
`

func (q *Queries) DeleteRegistrations(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRegistrations, id)
	return err
}

const getRegistration = `-- name: GetRegistration :one
SELECT id, first_name, middle_name, last_name, phone_number, email_address, street_address_line1, street_address_line2, city, state, zip_code, photo_path, birth_date, appointment_date, appointment_time, created_at FROM registrations
WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetRegistration(ctx context.Context, id int64) (Registration, error) {
	row := q.db.QueryRowContext(ctx, getRegistration, id)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.StreetAddressLine1,
		&i.StreetAddressLine2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.PhotoPath,
		&i.BirthDate,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.CreatedAt,
	)
	return i, err
}

const getRegistrationForUpdate = `-- name: GetRegistrationForUpdate :one
SELECT id, first_name, middle_name, last_name, phone_number, email_address, street_address_line1, street_address_line2, city, state, zip_code, photo_path, birth_date, appointment_date, appointment_time, created_at FROM registrations
WHERE id = $1 LIMIT 1
    FOR NO KEY UPDATE
`

func (q *Queries) GetRegistrationForUpdate(ctx context.Context, id int64) (Registration, error) {
	row := q.db.QueryRowContext(ctx, getRegistrationForUpdate, id)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.StreetAddressLine1,
		&i.StreetAddressLine2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.PhotoPath,
		&i.BirthDate,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.CreatedAt,
	)
	return i, err
}

const listRegistrations = `-- name: ListRegistrations :many
SELECT id, first_name, middle_name, last_name, phone_number, email_address, street_address_line1, street_address_line2, city, state, zip_code, photo_path, birth_date, appointment_date, appointment_time, created_at FROM registrations
LIMIT $1
    OFFSET $2
`

type ListRegistrationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRegistrations(ctx context.Context, arg ListRegistrationsParams) ([]Registration, error) {
	rows, err := q.db.QueryContext(ctx, listRegistrations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Registration{}
	for rows.Next() {
		var i Registration
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.PhoneNumber,
			&i.EmailAddress,
			&i.StreetAddressLine1,
			&i.StreetAddressLine2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.PhotoPath,
			&i.BirthDate,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegistration = `-- name: UpdateRegistration :one
UPDATE registrations
SET  first_name = $2,
     middle_name = $3,
     last_name = $4,
     phone_number = $5,
     email_address = $6,
     street_address_line1 = $7,
     street_address_line2 = $8,
     city = $9,
     state = $10,
     zip_code = $11,
     photo_path = $12,
     birth_date = $13,
     appointment_date = $14,
     appointment_time = $15
WHERE id = $1
    RETURNING id, first_name, middle_name, last_name, phone_number, email_address, street_address_line1, street_address_line2, city, state, zip_code, photo_path, birth_date, appointment_date, appointment_time, created_at
`

type UpdateRegistrationParams struct {
	ID                 int64  `json:"id"`
	FirstName          string `json:"first_name"`
	MiddleName         string `json:"middle_name"`
	LastName           string `json:"last_name"`
	PhoneNumber        string `json:"phone_number"`
	EmailAddress       string `json:"email_address"`
	StreetAddressLine1 string `json:"street_address_line1"`
	StreetAddressLine2 string `json:"street_address_line2"`
	City               string `json:"city"`
	State              string `json:"state"`
	ZipCode            string `json:"zip_code"`
	PhotoPath          string `json:"photo_path"`
	BirthDate          string `json:"birth_date"`
	AppointmentDate    string `json:"appointment_date"`
	AppointmentTime    string `json:"appointment_time"`
}

func (q *Queries) UpdateRegistration(ctx context.Context, arg UpdateRegistrationParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, updateRegistration,
		arg.ID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.StreetAddressLine1,
		arg.StreetAddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.PhotoPath,
		arg.BirthDate,
		arg.AppointmentDate,
		arg.AppointmentTime,
	)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.StreetAddressLine1,
		&i.StreetAddressLine2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.PhotoPath,
		&i.BirthDate,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.CreatedAt,
	)
	return i, err
}
